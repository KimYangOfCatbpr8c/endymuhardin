<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge">
    <title>FlexChart简介</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- styles -->
    <link rel="stylesheet" type="text/css" href="https://netdna.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css" />
    <link rel="stylesheet" type="text/css" href="styles/vendor/wijmo.min.css" />
    <link href="styles/app.css" rel="stylesheet" type="text/css" />

    <!-- jQuery/Bootstrap -->
    <script src="http://code.jquery.com/jquery-2.2.4.min.js" type="text/javascript"></script>
    <script src="https://netdna.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js" type="text/javascript"></script>

    <!-- Wijmo -->
    <script src="scripts/vendor/wijmo.min.js" type="text/javascript"></script>
    <script src="scripts/vendor/wijmo.input.min.js" type="text/javascript"></script>
    <script src="scripts/vendor/wijmo.chart.min.js" type="text/javascript"></script>
</head>
<body>
    <div class="header">
        <div class="container">
            <img src="resources/wijmo5.png" />
            <h1>FlexChart 101</h1>
            <p>
                这个页面演示如何开始使用Wijmo的FlexChart控件。
            </p>
        </div>
    </div>
    <div class="container">

        <!-- getting started -->
        <div>
            <h2>
                入门</h2>
            <p>
                在JavaScript应用中开始使用FlexChart的步骤：</p>
            <ol>
                <li>添加对Wijmo的引用。</li>
                <li>添加标记作为FlexChart的宿主。</li>
                <li>通过JavaScript初始化FlexChart和它的itemSource属性。</li>
                <li>创建一个或多个数据系列，并将它们添加到FlexChart的系列集合。</li>
                <li>（可选）添加一些CSS来自定义图表的外观。</li>
            </ol>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#gsHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#gsJs" role="tab" data-toggle="tab">JS</a></li>
                            <li><a href="#gsCss" role="tab" data-toggle="tab">CSS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane pane-content active" id="gsHtml">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;link rel="stylesheet" type="text/css" href="css/bootstrap.css"/&gt;
  &lt;link rel="stylesheet" type="text/css" href="css/wijmo.css" /&gt;
  &lt;link href="css/app.css" rel="stylesheet" type="text/css" /&gt;
  &lt;script src="scripts/wijmo.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script src="scripts/wijmo.input.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script src="scripts/wijmo.chart.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script src="scripts/app.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;!-- this is the FlexChart --&gt;
  &lt;div id="gettingStartChart"&gt;&lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;
                            </div>
                            <div class="tab-pane pane-content" id="gsJs">
// create FlexChart
var gettingStartedChart = new wijmo.chart.FlexChart('#gettingStartedChart');

// initialize FlexChart's properties
gettingStartedChart.initialize({
  itemsSource: appData,
  bindingX: 'country',
  series: [
    { name: 'Sales', binding: 'sales' },
    { name: 'Expenses', binding: 'expenses' },
    { name: 'Downloads', binding: 'downloads' }
  ]
});
                            </div>
                            <div class="tab-pane pane-content" id="gsCss">
.wj-flexchart {
  background-color: white;
  box-shadow: 4px 4px 10px 0px rgba(50, 50, 50, 0.75);
  height: 400px;
  margin-bottom: 12px;
  padding: 8px;
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>结果:</h4>
                    <div id="gettingStartedChart"></div>
                </div>
            </div>
        </div>

        <!-- chart types -->
        <div>
            <h2>图表类型</h2>
            <p> FlexChart控件有三个属性允许你来自定义图表的类型：</p>
            <ol>
                <li>
                    <b>chartType</b>: 对于所有系列对象选择默认的图表类型。个别系列对象可以覆盖它。
                </li>
                <li>
                    <b>stacking</b>: 确定系列对象是否独立地绘制，堆积或百分比堆积。
                </li>
                <li>
                    <b>rotated</b>: 翻转X轴和Y轴，导致X变为垂直，Y变为水平。
                </li>
            </ol>
            <p>以下这个示例让你看见当你改变这些属性的时候发生了什么：</p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#ctHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#ctJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane pane-content active" id="ctHtml">
&lt;div id="chartTypes"&gt;&lt;/div&gt;
&lt;select id="typeMenu"&gt;
  &lt;option value="0" selected="selected"&gt;Column&lt;/option&gt;
  &lt;option value="1"&gt;Bar&lt;/option&gt;
  &lt;option value="2"&gt;Scatter&lt;/option&gt;
  &lt;option value="3"&gt;Line&lt;/option&gt;
  &lt;option value="4"&gt;LineSymbols&lt;/option&gt;
  &lt;option value="5"&gt;Area&lt;/option&gt;
  &lt;option value="9"&gt;Spline&lt;/option&gt;
  &lt;option value="10"&gt;SplineSymbols&lt;/option&gt;
  &lt;option value="11"&gt;SplineArea&lt;/option&gt;
&lt;/select&gt;
&lt;select id="stackingMenu"&gt;
  &lt;option value="0" selected="selected"&gt;None&lt;/option&gt;
  &lt;option value="1"&gt;Stacked&lt;/option&gt;
  &lt;option value="2"&gt;Stacked 100%&lt;/option&gt;
&lt;/select&gt;
&lt;select id="rotatedMenu"&gt;
  &lt;option value="false" selected="selected"&gt;False&lt;/option&gt;
  &lt;option value="true"&gt;True&lt;/option&gt;
&lt;/select&gt;
                            </div>
                            <div class="tab-pane pane-content" id="ctJs">
// create FlexChart and Menus
var chartTypes = new wijmo.chart.FlexChart('#chartTypes'),
    typeMenu = new wijmo.input.Menu('#typeMenu'),
    stackingMenu = new wijmo.input.Menu('#stackingMenu'),
    rotatedMenu = new wijmo.input.Menu('#rotatedMenu');

// initialize FlexChart's properties
chartTypes.initialize({
  itemsSource: appData,
  bindingX: 'country',
  series: [
    { name: 'Sales', binding: 'sales' },
    { name: 'Expenses', binding: 'expenses' },
    { name: 'Downloads', binding: 'downloads' }
  ]
});

// update the menus' headers
updateMenuHeader(typeMenu, 'Chart Type');
updateMenuHeader(stackingMenu, 'Stacking');
updateMenuHeader(rotatedMenu, 'Rotated');

typeMenu.selectedIndexChanged.addHandler(function () {
  if (typeMenu.selectedValue) {
    // update FlexChart's chartType
    chartTypes.chartType = parseInt(typeMenu.selectedValue);

    // update menu header
    updateMenuHeader(typeMenu, 'Chart Type');
  }
});

stackingMenu.selectedIndexChanged.addHandler(function () {
  if (stackingMenu.selectedValue) {
    // update FlexChart's stacking property
    chartTypes.stacking = parseInt(stackingMenu.selectedValue);

    // update menu header
    updateMenuHeader(stackingMenu, 'Stacking');
  }
});

rotatedMenu.selectedIndexChanged.addHandler(function () {
  if (rotatedMenu.selectedValue) {
    // specify if chart should be rotated or not
    chartTypes.rotated = rotatedMenu.selectedValue === 'true';

    // update menu header
    updateMenuHeader(rotatedMenu, 'Rotated');
  }
});

// helper function for Menu headers
function updateMenuHeader(menu, prefix) {
  menu.header = '&lt;b&gt;' + prefix + '&lt;/b&gt;: ' + menu.text;
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>结果:</h4>
                    <div id="chartTypes"></div>
                    <select id="typeMenu">
                        <option value="0" selected="selected">Column</option>
                        <option value="1">Bar</option>
                        <option value="2">Scatter</option>
                        <option value="3">Line</option>
                        <option value="4">LineSymbols</option>
                        <option value="5">Area</option>
                        <option value="9">Spline</option>
                        <option value="10">SplineSymbols</option>
                        <option value="11">SplineArea</option>
                    </select>
                    <select id="stackingMenu">
                        <option value="0" selected="selected">无</option>
                        <option value="1">堆积</option>
                        <option value="2">百分比堆积</option>
                    </select>
                    <select id="rotatedMenu">
                        <option value="false" selected="selected">False</option>
                        <option value="true">True</option>
                    </select>
                </div>
            </div>
        </div>
        
        <!-- funnel charts -->
        <div>
            <h2>漏斗图</h2>
            <p>
                下面的示例演示如何创建和自定义漏斗图： 
            </p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#funnelHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#funnelJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="funnelHtml">
&lt;div id="funnelChart"&gt;&lt;/div&gt;
&lt;dl class="dl-horizontal"&gt;
    &lt;dt&gt;Neck Width&lt;/dt&gt;
    &lt;dd&gt;
        &lt;div id="funnelNeckWidth"&gt;&lt;/div&gt;
    &lt;/dd&gt;
&lt;/dl&gt;
&lt;dl class="dl-horizontal"&gt;
    &lt;dt&gt;Neck Height&lt;/dt&gt;
    &lt;dd&gt;
        &lt;div id="funnelNeckHeight"&gt;&lt;/div&gt;
    &lt;/dd&gt;
&lt;/dl&gt;
&lt;dl class="dl-horizontal"&gt;
    &lt;dt&gt;&lt;/dt&gt;
    &lt;dd&gt;
        &lt;select id="funnelType"&gt;
            &lt;option value="default" selected="selected"&gt;Default&lt;/option&gt;
            &lt;option value="rectangle"&gt;Rectangle&lt;/option&gt;
        &lt;/select&gt;
    &lt;/dd&gt;
&lt;/dl&gt;
                            </div>
                            <div class="tab-pane pane-content" id="funnelJs"> 
// create FlexChart and Menus
var funnelChart = new wijmo.chart.FlexChart('#funnelChart'),
    neckWidth = new wijmo.input.InputNumber('#funnelNeckWidth'),
    funnelType = new wijmo.input.Menu('#funnelType'),
    neckHeight = new wijmo.input.InputNumber('#funnelNeckHeight');

// initialize FlexChart's properties
funnelChart.initialize({
    itemsSource: funnelData,
    chartType: wijmo.chart.ChartType.Funnel,
    bindingX: 'country',
    series: [
        { name: 'Sales', binding: 'sales' }
    ],
    dataLabel: { content: '{y}' },
    options: {
        funnel: {
            neckWidth: 0.2,
            neckHeight: 0.2,
            type: 'default'
        }
    }
});

// neckWidth - initialize InputNumber's properties
neckWidth.min = 0;
neckWidth.max = 1;
neckWidth.step = 0.1;
neckWidth.valueChanged.addHandler(function (sender) {
    if (sender.value < sender.min || sender.value > sender.max) {
        return;
    }
    funnelChart.options.funnel.neckWidth = sender.value;
    funnelChart.refresh(true);
});
neckWidth.value = 0.2;

// neckHeight - initialize InputNumber's properties
neckHeight.min = 0;
neckHeight.max = 1;
neckHeight.step = 0.1;
neckHeight.valueChanged.addHandler(function (sender) {
    if (sender.value < sender.min || sender.value > sender.max) {
        return;
    }
    funnelChart.options.funnel.neckHeight = sender.value;
    funnelChart.refresh(true);
});
neckHeight.value = 0.2;

updateMenuHeader(funnelType, 'Funnel Type');
funnelType.selectedIndexChanged.addHandler(function () {
    if (funnelType.selectedValue) {
        funnelChart.options.funnel.type = funnelType.selectedValue;
        updateMenuHeader(funnelType, 'Funnel Type');
        funnelChart.refresh(true);
    }
});

// helper function for Menu headers
function updateMenuHeader(menu, prefix) {
    menu.header = '<b>' + prefix + '</b>: ' + menu.text;
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>结果：</h4>
                    <div id="funnelChart"></div>
                    <dl class="dl-horizontal">
                        <dt>Neck Width</dt>
                        <dd>
                            <div id="funnelNeckWidth"></div>
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>Neck Height</dt>
                        <dd>
                            <div id="funnelNeckHeight"></div>
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt></dt>
                        <dd>
                            <select id="funnelType">
                                <option value="default" selected="selected">Default</option>
                                <option value="rectangle">Rectangle</option>
                            </select>
                        </dd>
                    </dl>
                </div>
            </div>
        </div>
        <!-- mixed chart types -->
        <div>
            <h2>混合图表类型</h2>
            <p>你可以对每个图表系列使用不同的图表类型，这是通过对它这个系列本身设置<b>chartType</b>属性。
                这会覆盖图表的默认图表类型。</p>
            <p>在以下的示例，这个图表的<b>chartType</b>属性被设为<b>Column</b>，
                但是<b>Downloads</b>系列使用了<b>LineAndSymbol</b>类型覆盖它：</p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#mctHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#mctJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane pane-content active" id="mctHtml">
&lt;div id="mixedTypesChart"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="mctJs">
// create FlexChart
var mixedTypesChart = new wijmo.chart.FlexChart('#mixedTypesChart');

// initialize FlexChart's properties
mixedTypesChart.initialize({
  itemsSource: appData,
  bindingX: 'country',
  series: [
    { name: 'Sales', binding: 'sales' },
    { name: 'Expenses', binding: 'expenses' },
    { name: 'Downloads', binding: 'downloads', chartType: wijmo.chart.ChartType.LineSymbols }
  ]
});
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>结果:</h4>
                    <div id="mixedTypesChart"></div>
                </div>
            </div>
        </div>

        <!-- legend and titles -->
        <div>
            <h2>图例和标题</h2>
            <p>使用legend属性来自定义图表图例的外观， and
                使用<b>header</b>，<b>footer</b>和坐标的<b>title</b>属性来向你的图表添加标题。</p>
            <p>你可以使用CSS来确定图例和标题的样式。下面的CSS标签显示用于自定义图例和标题的外观的规则。
                注意它们是SVG元素，所以你必须使用”fill”这样的CSS属性而不是”color”。</p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#ltHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#ltJs" role="tab" data-toggle="tab">JS</a></li>
                            <li><a href="#ltCss" role="tab" data-toggle="tab">CSS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane pane-content active" id="ltHtml">
&lt;div id="chartLegendTitles"&gt;&lt;/div&gt;
&lt;dl class="dl-horizontal"&gt;
  &lt;dt&gt;Header&lt;/dt&gt;&lt;dd&gt;&lt;input id="headerInput" class="form-control"/&gt;&lt;/dd&gt;
  &lt;dt&gt;Footer&lt;/dt&gt;&lt;dd&gt;&lt;input id="footerInput" class="form-control"/&gt;&lt;/dd&gt;
  &lt;dt&gt;X-Axis Title&lt;/dt&gt;&lt;dd&gt;&lt;input id="xTitleInput" class="form-control"/&gt;&lt;/dd&gt;
  &lt;dt&gt;Y-Axis Title&lt;/dt&gt;&lt;dd&gt;&lt;input id="yTitleInput" class="form-control"/&gt;&lt;/dd&gt;
  &lt;dt&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;select id="positionMenu"&gt;
      &lt;option value="0"&gt;None&lt;/option&gt;
      &lt;option value="1"&gt;Left&lt;/option&gt;
      &lt;option value="2"&gt;Top&lt;/option&gt;
      &lt;option value="3" selected="selected"&gt;Right&lt;/option&gt;
      &lt;option value="4"&gt;Bottom&lt;/option&gt;
    &lt;/select&gt;
  &lt;/dd&gt;
&lt;/dl&gt;
                            </div>
                            <div class="tab-pane pane-content" id="ltJs">
var chartLegendAndTitles = new wijmo.chart.FlexChart('#chartLegendAndTitles'),
    positionMenu = new wijmo.input.Menu('#positionMenu'),
    headerInput = document.getElementById('headerInput'),
    footerInput = document.getElementById('footerInput'),
    xTitleInput = document.getElementById('xTitleInput'),
    yTitleInput = document.getElementById('yTitleInput');

// initialize FlexChart's properties
chartLegendAndTitles.initialize({
  itemsSource: appData,
  bindingX: 'country',
  header: 'Sample Chart',
  footer: 'copyright (c) ComponentOne',
  axisX: { title: 'country' },
  axisY: { title: 'amount' },
  series: [
    { name: 'Sales', binding: 'sales' },
    { name: 'Expenses', binding: 'expenses' },
    { name: 'Downloads', binding: 'downloads' }
  ]
});

// sync the input's value with FlexChart's header
headerInput.value = chartLegendAndTitles.header;

// update the FlexChart's header
headerInput.addEventListener('input', function () {
  chartLegendAndTitles.header = this.value;
});

// sync the input's value with FlexChart's footer
footerInput.value = chartLegendAndTitles.footer;

// update the FlexChart's footer
footerInput.addEventListener('input', function () {
  chartLegendAndTitles.footer = this.value;
});

// sync the input's value with FlexChart's X-Axis title
xTitleInput.value = chartLegendAndTitles.axisX.title;

// update the FlexChart's X-Axis title
xTitleInput.addEventListener('input', function () {
  chartLegendAndTitles.axisX.title = this.value;
});

// sync the input's value with FlexChart's Y-Axis title
yTitleInput.value = chartLegendAndTitles.axisY.title;

// update the FlexChart's Y-Axis title
yTitleInput.addEventListener('input', function () {
  chartLegendAndTitles.axisY.title = this.value;
});

// update menu's header
updatePositionMenuHeader();
positionMenu.selectedIndexChanged.addHandler(function () {
  if (positionMenu.selectedValue) {
    // update the FlexChart legend's position
    chartLegendAndTitles.legend.position = parseInt(positionMenu.selectedValue);

    // update menu's header
    updatePositionMenuHeader();
  }
});

function updatePositionMenuHeader() {
  positionMenu.header = '&lt;b&gt;Legend:&lt;/b&gt; ' + positionMenu.text;
}
                            </div>
                            <div class="tab-pane pane-content" id="ltCss">
.wj-flexchart .wj-title {
  font-weight: bold;
}
.wj-flexchart .wj-header .wj-title {
  fill: #80044d;
  font-size: 18pt;
}
.wj-flexchart .wj-footer .wj-title {
  fill: #80044d;
}
.wj-flexchart .wj-axis-x .wj-title,
.wj-flexchart .wj-axis-y .wj-title {
  font-style: italic;
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>结果:</h4>
                    <div id="chartLegendAndTitles"></div>
                    <dl class="dl-horizontal">
                        <dt>页眉</dt><dd><input id="headerInput" class="form-control"/></dd>
                        <dt>页尾</dt><dd><input id="footerInput" class="form-control"/></dd>
                        <dt>X轴标题</dt><dd><input id="xTitleInput" class="form-control"/></dd>
                        <dt>Y轴标题</dt><dd><input id="yTitleInput" class="form-control"/></dd>
                        <dt></dt>
                        <dd>
                            <select id="positionMenu">
                                <option value="0">无</option>
                                <option value="1">左</option>
                                <option value="2">上</option>
                                <option value="3" selected="selected">右</option>
                                <option value="4">下</option>
                            </select>
                        </dd>
                    </dl>
                </div>
            </div>
        </div>

        <!-- tooltips -->
        <div>
            <h2>工具提示</h2>
            <p>FlexChart对工具提示有内置的支持。
                默认情况下，当用户触摸或者悬停鼠标到一个数据点时，控件会显示工具提示。</p>
            <p>工具提示的内容是使用一个可能包含下列参数的模板生成：</p>
            <ul>
                <li><b>seriesName</b>: 包含图表元素的系列名称</li>
                <li><b>pointIndex</b>: 系列中图表元素的参数</li>
                <li><b>x</b>: 图表元素的<b>x</b>值</li>
                <li><b>y</b>: 图表元素的<b>y</b>值</li>
            </ul>
            <p>
                默认情况下，tooltip模板被设为<code>&lt;b&gt;{seriesName}&lt;/b&gt;&lt;br/&gt;{x} {y}</code>，你可以在上面的图表看到它是如何工作的。
                在这个示例中，我们设tooltip模板为<code>&lt;b&gt;{seriesName}&lt;/b&gt; &lt;img src='resources/{x}.png'/&gt;&lt;br/&gt;{y}</code>,
                它使用国家的国旗代替了国家的名字。
            </p>
            <p>你可以通过设置模板为空字符串来禁用图表tooltips。</p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#tooltipHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#tooltipJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane pane-content active" id="tooltipHtml">
&lt;div id="chartTooltip"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="tooltipJs">
// create FlexChart
var chartTooltip = new wijmo.chart.FlexChart('#chartTooltip');

// initialize FlexChart's properties
chartTooltip.initialize({
  itemsSource: appData,
  bindingX: 'country',
  tooltip: { content: "&lt;img src='resources/{x}.png' /&gt; &lt;b&gt;{seriesName}&lt;/b&gt;&lt;br /&gt;{y}" },
  series: [
    { name: 'Sales', binding: 'sales' },
    { name: 'Expenses', binding: 'expenses' },
    { name: 'Downloads', binding: 'downloads' }
  ]
});
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>结果:</h4>
                    <div id="chartTooltip"></div>
                </div>
            </div>
        </div>

        <!-- styling series -->
        <div>
            <h2>样式系列</h2>
            <p>
                FlexChart为每个基于默认调色板的系列自动选取颜色，你可以通过设置<b>palette</b>属性来重写它。
                但你也可以重写默认的属性，通过设置任意一个系列的<b>style</b>属性为一个对象，
                它制定了SVG样式属性，包括<b>fill</b>, <b>stroke</b>, <b>strokeThickness</b>等等。
            </p>
            <p>
                <b>Series.style</b>属性对在Wijmo中通过CSS设置样式的一般规则来说，是一个例外。
                这个例外反映一个事实，许多图表有动态系列，这是不可能提前布置样式的。
                比如，一个股票图表可能会展示用户在运行程序时才选中的系列。
            </p>
            <p>
                这个示例中的图表使用了<b>style</b>和<b>symbolStyle</b>属性来为每个系列选择样式属性：
            </p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#seriesStyleHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#seriesStyleJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane pane-content active" id="seriesStyleHtml">
&lt;div id="chartSeriesStyle"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="seriesStyleJs">
// create FlexChart and variables for its series
var chartSeriesStyle = new wijmo.chart.FlexChart('#chartSeriesStyle'),
    salesSeries, expensesSeries, downloadsSeries;

chartSeriesStyle.itemsSource = appData;
chartSeriesStyle.bindingX = 'country';

// initialize "Sales" data series
salesSeries = new wijmo.chart.Series();
salesSeries.name = 'Sales';
salesSeries.binding = 'sales';
salesSeries.style = {};
salesSeries.style.fill = 'green';
salesSeries.style.stroke = 'darkgreen';
salesSeries.style.strokeWidth = 1;

// initialize "Expenses" data series
expensesSeries = new wijmo.chart.Series();
expensesSeries.name = 'Expenses';
expensesSeries.binding = 'expenses';
expensesSeries.style = {};
expensesSeries.style.fill = 'red';
expensesSeries.style.stroke = 'darkred';
expensesSeries.style.strokeWidth = 1;

// initialize "Downloads" data series
downloadsSeries = new wijmo.chart.Series();
downloadsSeries.name = 'Downloads';
downloadsSeries.binding = 'downloads';
downloadsSeries.chartType = wijmo.chart.ChartType.LineSymbols;
downloadsSeries.style = {};
downloadsSeries.symbolStyle = {};
downloadsSeries.style.stroke = 'orange';
downloadsSeries.style.strokeWidth = 5;
downloadsSeries.symbolStyle.fill = 'gold';
downloadsSeries.symbolStyle.stroke = 'gold';

// add data series to chart
chartSeriesStyle.series.push(salesSeries);
chartSeriesStyle.series.push(expensesSeries);
chartSeriesStyle.series.push(downloadsSeries);
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>结果:</h4>
                    <div id="chartSeriesStyle"></div>
                </div>
            </div>
        </div>

        <!-- customizing axes -->
        <div>
            <h2>自定义轴</h2>
            <p>使用axis属性来自定义图表的坐标轴，包括范围（最小值和最大值），便签格式，刻度间隔和网格线。
            </p>
            <p>
                <b>Axis</b>类有布尔属性，允许你打开或关闭功能（如<b>axisLine</b>, <b>labels</b>, <b>majorTickMarks</b>和<b>majorGrid</b>）。
                你可以使用CSS来设置这些已经打开的功能的样式。
            </p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#customizeAxesHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#customizeAxesJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane pane-content active" id="customizeAxesHtml">
&lt;div id="chartCustomizeAxes"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="customizeAxesJs">
// create FlexChart
var chartCustomizeAxes = new wijmo.chart.FlexChart('#chartCustomizeAxes');

// initialize FlexChart's properties
chartCustomizeAxes.initialize({
  itemsSource: appData,
  bindingX: 'country',
  axisX: { axisLine: true, majorGrid: true },
  axisY: { format: 'c0', max: 10000, majorUnit: 2000, axisLine: true, majorGrid: true },
  series: [
    { name: 'Sales', binding: 'sales' },
    { name: 'Expenses', binding: 'expenses' }
  ]
});
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>结果:</h4>
                    <div id="chartCustomizeAxes"></div>
                </div>
            </div>
        </div>

        <!-- theming -->
        <div>
            <h2>主题</h2>
            <p>FlexChart的外观是在CSS中定义的。除了默认的主题，我们有十几个专业设计的主题。
                它们定制了所有Wijmo控件的外观来达到一致的，有吸引力的效果。
            </p>
            <p> 为了自定义图表的外观，检查你想要提供样式的元素并创建一下CSS规则来应用到这些元素中。
            </p>
            <p>
                例如，如果你在IE或者谷歌浏览器上右击X轴上的一个标签，你会发现它是一个拥有”wj-label”类的元素，
                它被包含在拥有”wj-flexchart”类的顶层控件元素中。这个示例中第一条CSS规则使用这条信息来自定义X标签。
                规则选择器添加了额外的要求，父类元素必须拥有"wj-flexchart"类<b>和</b>"custom-flex-chart"类。
                如果没有的话，这个规则会用于这个页面所有的图表。
            </p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#themeHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#themeJs" role="tab" data-toggle="tab">JS</a></li>
                            <li><a href="#themeCss" role="tab" data-toggle="tab">CSS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane pane-content active" id="themeHtml">
&lt;div id="chartTheme" class="custom-flex-chart"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="themeJs">
// create FlexChart
var chartTheme = new wijmo.chart.FlexChart('#chartTheme');

// initialize FlexChart's properties
chartTheme.initialize({
  itemsSource: appData,
  bindingX: 'country',
  series: [
    { name: 'Sales', binding: 'sales' },
    { name: 'Expenses', binding: 'expenses' },
    { name: 'Downloads', binding: 'downloads' }
  ]
});
                            </div>
                            <div class="tab-pane pane-content" id="themeCss">
/* custom chart theme */
.custom-flex-chart.wj-flexchart .wj-axis-x .wj-label,
.custom-flex-chart.wj-flexchart .wj-legend .wj-label {
  font-family: 'Courier New', Courier, monospace;
  font-weight: bold;
}

.custom-flex-chart.wj-flexchart .wj-legend > rect,
.custom-flex-chart.wj-flexchart .wj-plot-area >  rect {
  fill: #f8f8f8;
  stroke: #c0c0c0;
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>结果:</h4>
                    <div id="chartTheme" class="custom-flex-chart"></div>
                </div>
            </div>
        </div>

        <!-- selection modes -->
        <div>
            <h2>选择模式</h2>
            <p> FlexChart允许你通过单击或者触摸选择系列或数据点。使用<b>selectionMode</b>属性来指定是否允许选择系列，
                是否选择数据点或者无法选择（选择默认是关闭的）
            </p>
            <p>
                设置<b>selectionMode</b>属性为<b>Series</b>或者<b>Point</b>会导致用户在单击鼠标的时候，
                FlexChart自动更新<b>Selection</b>属性，
                并且将"wj-state-selected"类应用到选中的图表元素中。
            </p>
            <p>
                <b>Selection</b>属性返回当前选中的系列。要得到当前选中的数据点，
                得到当前选定的项并在选中的系列中使用<b>Series.collectionView.currentItem</b>属性，正如示例所示。

            </p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class ="active"><a href="#selectionModeHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#selectionModeJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane pane-content active" id="selectionModeHtml">
&lt;div id="chartSelectionMode"&gt;&lt;/div&gt;
&lt;select id="seletionModeMenu"&gt;
  &lt;option value="0"&gt;None&lt;/option&gt;
  &lt;option value="1" selected="selected"&gt;Series&lt;/option&gt;
  &lt;option value="2"&gt;Point&lt;/option&gt;
&lt;/select&gt;
&lt;select id="chartTypeMenu"&gt;
  &lt;option value="0" selected="selected"&gt;Column&lt;/option&gt;
  &lt;option value="1"&gt;Bar&lt;/option&gt;
  &lt;option value="2"&gt;Scatter&lt;/option&gt;
  &lt;option value="3"&gt;Line&lt;/option&gt;
  &lt;option value="4"&gt;LineSymbols&lt;/option&gt;
  &lt;option value="5"&gt;Area&lt;/option&gt;
  &lt;option value="9"&gt;Spline&lt;/option&gt;
  &lt;option value="10"&gt;SplineSymbols&lt;/option&gt;
  &lt;option value="11"&gt;SplineArea&lt;/option&gt;
&lt;/select&gt;
&lt;div id="seriesContainer" style="display:none"&gt;
  &lt;h4&gt;Current Selection&lt;/h4&gt;
  &lt;p&gt;Series: &lt;b id="seriesName"&gt;&lt;/b&gt;&lt;/p&gt;
  &lt;dl id="detailContainer" class="dl-horizontal" style="display:none"&gt;
    &lt;dt&gt;Country&lt;/dt&gt;&lt;dd id="seriesCountry"&gt;&lt;/dd&gt;
    &lt;dt&gt;Sales&lt;/dt&gt;&lt;dd id="seriesSales"&gt;&lt;/dd&gt;
    &lt;dt&gt;Expenses&lt;/dt&gt;&lt;dd id="seriesExpenses"&gt;&lt;/dd&gt;
    &lt;dt&gt;Downloads&lt;/dt&gt;&lt;dd id="seriesDownloads"&gt;&lt;/dd&gt;
  &lt;/dl&gt;
&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="selectionModeJs">
var chartSelectionMode = new wijmo.chart.FlexChart('#chartSelectionMode'),
    typeMenu = new wijmo.input.Menu('#chartTypeMenu'),
    selectionModeMenu = new wijmo.input.Menu('#seletionModeMenu'),
    seriesContainer = document.getElementById('seriesContainer'),
    detailContainer = document.getElementById('detailContainer');

// initialize FlexChart's properties
chartSelectionMode.initialize({
  itemsSource: appData,
  bindingX: 'country',
  selectionMode: wijmo.chart.SelectionMode.Series,
  series: [
    { name: 'Sales', binding: 'sales' },
    { name: 'Expenses', binding: 'expenses' },
    { name: 'Downloads', binding: 'downloads' }
  ]
});

// update details when the FlexChart's selection changes
chartSelectionMode.selectionChanged.addHandler(function () {
  var currentSelection = chartSelectionMode.selection,
  currentSelectItem;

  if (currentSelection) {
    seriesContainer.style.display = 'block'; // show container

    document.getElementById('seriesName').innerHTML = currentSelection.name;
    currentSelectItem = currentSelection.collectionView.currentItem;

    if (currentSelectItem && selectionModeMenu.selectedValue === '2') {
      setSeriesDetail(currentSelectItem); // update details
    }
  }
});

// update Menu header
updateMenuHeader(typeMenu, 'Chart Type');
typeMenu.selectedIndexChanged.addHandler(function () {
  if (typeMenu.selectedValue) {
    // update FlexChart' chartType
    chartSelectionMode.chartType = parseInt(typeMenu.selectedValue);

    // update Menu header
    updateMenuHeader(typeMenu, 'Chart Type');
  }
});

// update Menu header
updateMenuHeader(selectionModeMenu, 'Selection Mode');
selectionModeMenu.selectedIndexChanged.addHandler(function () {
  if (selectionModeMenu.selectedValue) {
    // update FlexChart' selectionMode
    chartSelectionMode.selectionMode = parseInt(selectionModeMenu.selectedValue);

    // toggle the series panel's visiblity
    if (selectionModeMenu.selectedValue === '0' || !chartSelectionMode.selection) {
      seriesContainer.style.display = 'none';
    }
    else {
      seriesContainer.style.display = 'block';
    }

    // toggle the series panel's visiblity
    if (selectionModeMenu.selectedValue !== '2' || !chartSelectionMode.selection || !chartSelectionMode.selection.collectionView.currentItem) {
      detailContainer.style.display = 'none';
    }
    else {
      // update the details
      setSeriesDetail(chartSelectionMode.selection.collectionView.currentItem);
    }

    // update Menu header
    updateMenuHeader(selectionModeMenu, 'Selection Mode');
  }
});

// helper method to show details of the FlexChart's current selection
function setSeriesDetail(currentSelectItem) {
  detailContainer.style.display = 'block';
  document.getElementById('seriesCountry').innerHTML = currentSelectItem.country;
  document.getElementById('seriesSales').innerHTML = wijmo.Globalize.format(currentSelectItem.sales, 'c2');
  document.getElementById('seriesExpenses').innerHTML = wijmo.Globalize.format(currentSelectItem.expenses, 'c2');
  document.getElementById('seriesDownloads').innerHTML = wijmo.Globalize.format(currentSelectItem.downloads, 'n0');
};

// helper method for changing menu header
function updateMenuHeader(menu, prefix) {
  menu.header = '&lt;b&gt;' + prefix  + '&lt;/b&gt;: ' + menu.text;
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>结果:</h4>
                    <div id="chartSelectionMode"></div>
                    <select id="seletionModeMenu">
                        <option value="0">None</option>
                        <option value="1" selected="selected">Series</option>
                        <option value="2">Point</option>
                    </select>
                    <select id="chartTypeMenu">
                        <option value="0" selected="selected">Column</option>
                        <option value="1">Bar</option>
                        <option value="2">Scatter</option>
                        <option value="3">Line</option>
                        <option value="4">LineSymbols</option>
                        <option value="5">Area</option>
                        <option value="9">Spline</option>
                        <option value="10">SplineSymbols</option>
                        <option value="11">SplineArea</option>
                    </select>
                    <div id="seriesContainer" style="display:none">
                        <h4>当前选择</h4>
                        <p>Series: <b id="seriesName"></b></p>
                        <dl id="detailContainer" class="dl-horizontal" style="display:none">
                            <dt>Country</dt><dd id="seriesCountry"></dd>
                            <dt>Sales</dt><dd id="seriesSales"></dd>
                            <dt>Expenses</dt><dd id="seriesExpenses"></dd>
                            <dt>Downloads</dt><dd id="seriesDownloads"></dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>

        <!-- toggle series visibility -->
        <div>
            <h2>切换系列</h2>
            <p>
                <b>Series</b>类有一个<b>visibility</b>属性，让你决定一个系列是否应该展现在图表和图例中，
                或者只在图例中，或者完全隐藏。
            </p>
            <p>
                这个示例演示你应该如何使用<b>visibility</b>属性来通过两种方法切换系列的可见性：
            </p>
            <ol>
                <li>
                    单击图例入口：<br />
                    图表会设置图表的<b>option.legendToggle</b>属性为true，
                    当它的图例入口被单击的时候就会切换一个系列的<b>visibility</b>属性。
                </li>
                <li>
                    使用checkbox：<br />
                    当<b>checked</b>状态改变后，它会通过<b>checked</b>状态设置每个系列的<b>checked</b>属性。
                </li>
            </ol>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#legendToggleHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#legendToggleJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane pane-content active" id="legendToggleHtml">
&lt;div id="chartLegendToggle"&gt;&lt;/div&gt;
Sales &lt;input id="cbSales" type="checkbox"/&gt;&lt;br /&gt;
Expenses &lt;input id="cbExpenses" type="checkbox"/&gt;&lt;br /&gt;
Downloads &lt;input id="cbDownloads" type="checkbox"/&gt;
                            </div>
                            <div class="tab-pane pane-content" id="legendToggleJs">
// create FlexChart
var chartLegendToggle = new wijmo.chart.FlexChart('#chartLegendToggle');

// initialize FlexChart's properties
chartLegendToggle.initialize({
  itemsSource: appData,
  bindingX: 'country',
  legendToggle: true,
  series: [
    { name: 'Sales', binding: 'sales' },
    { name: 'Expenses', binding: 'expenses' },
    { name: 'Downloads', binding: 'downloads' }
  ]
});

chartLegendToggle.seriesVisibilityChanged.addHandler(function () {
  // loop through chart series
  chartLegendToggle.series.forEach(function (series) {
    var seriesName = series.name,
        checked = series.visibility === wijmo.chart.SeriesVisibility.Visible;

    // update custom checkbox panel
    document.getElementById('cb' + seriesName).checked = checked;
  });
});

// loop through custom check boxes
['cbSales', 'cbExpenses', 'cbDownloads'].forEach(function (item, index) {
  // update checkbox and toggle FlexChart's series visibility when clicked
  var el = document.getElementById(item);
  el.checked = chartLegendToggle.series[index].visibility === wijmo.chart.SeriesVisibility.Visible;
  el.addEventListener('click', function () {
    if (this.checked) {
      chartLegendToggle.series[index].visibility = wijmo.chart.SeriesVisibility.Visible;
    }
    else {
      chartLegendToggle.series[index].visibility = wijmo.chart.SeriesVisibility.Legend;
    }
  });
});
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>结果:</h4>
                    <div id="chartLegendToggle"></div>
                    Sales <input id="cbSales" type="checkbox"/><br />
                    Expenses <input id="cbExpenses" type="checkbox"/><br />
                    Downloads <input id="cbDownloads" type="checkbox"/>
                </div>
            </div>
        </div>
        
        <!-- gradient colors -->
        <div>
            <h2 id="GradientColors">
                渐变色
            </h2>
            <p>
                FlexChart支持渐变色。
            </p>
            <p>
                渐变描述符是如下格式的表达式: <code>&lt;type&gt;(&lt;coords&gt;)&lt;colors&gt;[:&lt;offset&gt;[:&lt;opacity&gt;]][-&lt;colors&gt;[:&lt;offset&gt;[:&lt;opacity&gt;]]]-&lt;colors&gt;[:&lt;offset&gt;[:&lt;opacity&gt;]]</code>.
                <code>&lt;type&gt;</code>可以是线性的，也可以是径向的。 
                大写<code>L</code>或者<code>R</code>字母表示从SVG表明偏移的绝对坐标。
                小写<code>l</code>或者<code>r</code>字母表示相对于应用渐变的元素计算的坐标。
                坐标指定一个线性渐变向量<code>x1</code>, <code>y1</code>, <code>x2</code>, <code>y2</code>,
                或者径向渐变向量 <code>cx</code>, <code>cy</code>, <code>r</code>和可选<code>fx</code>, <code>fy</code>, <code>fr</code>
                指定远离圆心的焦点。
                将<code>&lt;colors&gt;</code>指定为以虚线分隔的CSS颜色值的列表。 每种颜色可以后跟一个自定义偏移和不透明度值，用冒号字符分隔。
            </p>
            <p>线性渐变格式示例：</p>
            <p><code>'l(0,0,1,0)#ff0000-#00ff00-#0000ff'</code>, <code>'L(0,0,300,300)#ff0000:0.2:0.2-00ff00:0.8'</code></p>
            <p>径向渐变格式示例：</p>
            <p><code>'r(0.5,0.5,1)#ff0000-#0000ff'</code>, <code>'R(100,100,100,200,200,200)#ff0000-#0000ff'</code></p>
            <h3>基本</h3>
            <p>从预定义的渐变颜色中选择以查看不同的外观。</p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#gradientBasicColorsHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#gradientBasicColorsJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane pane-content active" id="gradientBasicColorsHtml">
&lt;div id="predefinedChart"&gt;&lt;/div&gt;
&lt;div&gt;
    &lt;select id="predefinedColorMenu"&gt;
        &lt;option value="l(0,0,1,0)#89f7fe-#66a6ff" selected="selected"&gt;Light Blue - l(0, 0, 1, 0)#89f7fe-#66a6ff&lt;/option&gt;
        &lt;option value="l(0,0,0,1)#13547a-#80d0c7"&gt;Aqua - l(0, 0, 0, 1)#13547a-#80d0c7&lt;/option&gt;
        &lt;option value="l(0,0,1,1)#ff0844-#ffb199"&gt;Red - l(0, 0, 1, 1)#ff0844-#ffb199&lt;/option&gt;
        &lt;option value="l(0,0,1,0)#b224ef-#7579ff-#b224ef"&gt;Purple - l(0, 0, 1, 0)#b224ef-#7579ff-#b224ef&lt;/option&gt;
        &lt;option value="r(0.5,0.5,0.7)#cc208e-#6713d2"&gt;Plum - r(0.5,0.5,0.7)#cc208e-#6713d2&lt;/option&gt;
        &lt;option value="l(0,0,1,0)#30cfd0-#330867"&gt;Deep Blue - l(0, 0, 1, 0)#30cfd0-#330867&lt;/option&gt;
        &lt;option value="l(0,0,0,1)#e27f00-#ae1a73"&gt;Orange - l(0, 0, 0, 1)#e27f00-#ae1a73&lt;/option&gt;
        &lt;option value="l(0,0,1,1)#abd800-#5c7e00"&gt;Green - l(0, 0, 1, 1)#abd800-#5c7e00&lt;/option&gt;
    &lt;/select&gt;
&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="gradientBasicColorsJs">
var predefinedChart = new wijmo.chart.FlexChart('#predefinedChart'),
    predefinedColorMenu = new wijmo.input.Menu('#predefinedColorMenu');
// initialize FlexChart's properties
predefinedChart.initialize({
    itemsSource: appData,
    bindingX: 'country',
    series: [
        { binding: 'sales' }
    ]
});
updateMenuHeader(predefinedColorMenu, 'Color');
predefinedColorMenu.selectedIndexChanged.addHandler(function () {
    if (predefinedColorMenu.selectedValue) {
        applyBasicGradientColor();
        updateMenuHeader(predefinedColorMenu, 'Color');
    }
});
applyBasicGradientColor();
    
function applyBasicGradientColor() {
    predefinedChart.series[0].style = {
        fill: predefinedColorMenu.selectedValue
    };
    predefinedChart.refresh(true);
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>结果：</h4>
                    <div id="predefinedChart"></div>
                    <div>
                        <select id="predefinedColorMenu">
                            <option value="l(0,0,1,0)#89f7fe-#66a6ff" selected="selected">Light Blue - l(0, 0, 1, 0)#89f7fe-#66a6ff</option>
                            <option value="l(0,0,0,1)#13547a-#80d0c7">Aqua - l(0, 0, 0, 1)#13547a-#80d0c7</option>
                            <option value="l(0,0,1,1)#ff0844-#ffb199">Red - l(0, 0, 1, 1)#ff0844-#ffb199</option>
                            <option value="l(0,0,1,0)#b224ef-#7579ff-#b224ef">Purple - l(0, 0, 1, 0)#b224ef-#7579ff-#b224ef</option>
                            <option value="r(0.5,0.5,0.7)#cc208e-#6713d2">Plum - r(0.5,0.5,0.7)#cc208e-#6713d2</option>
                            <option value="l(0,0,1,0)#30cfd0-#330867">Deep Blue - l(0, 0, 1, 0)#30cfd0-#330867</option>
                            <option value="l(0,0,0,1)#e27f00-#ae1a73">Orange - l(0, 0, 0, 1)#e27f00-#ae1a73</option>
                            <option value="l(0,0,1,1)#abd800-#5c7e00">Green - l(0, 0, 1, 1)#abd800-#5c7e00</option>
                        </select>
                    </div>
                </div>
            </div>
            <h3>高级</h3>
            <p>设置多个选项来自定义渐变色。</p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#gradientColorsHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#gradientColorsJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
        <div class="tab-pane pane-content active" id="gradientColorsHtml">
&lt;div id="chartGradientColors"&gt;&lt;/div&gt;
&lt;dl class="dl-horizontal"&gt;
    &lt;dt&gt;Generated fill string:&lt;/dt&gt;
    &lt;dd&gt;
        &lt;label id="gradientColorsLabel"&gt;&lt;/label&gt;
    &lt;/dd&gt;
    &lt;dt&gt;&lt;/dt&gt;
    &lt;dd&gt;
        &lt;select id="gradientChartType"&gt;
            &lt;option value="0" selected="selected"&gt;Column&lt;/option&gt;
            &lt;option value="1"&gt;Bar&lt;/option&gt;
            &lt;option value="5"&gt;Area&lt;/option&gt;
            &lt;option value="11"&gt;SplineArea&lt;/option&gt;
        &lt;/select&gt;
    &lt;/dd&gt;
    &lt;dt&gt;&lt;/dt&gt;
    &lt;dd&gt;
        &lt;select id="gradientTypeMenu"&gt;
            &lt;option value="l" selected="selected"&gt;Linear&lt;/option&gt;
            &lt;option value="r"&gt;Radial&lt;/option&gt;
        &lt;/select&gt;
    &lt;/dd&gt;
    &lt;dt id="dtGradientDirection"&gt;&lt;/dt&gt;
    &lt;dd id="ddGradientDirection"&gt;
        &lt;select id="gradientDirectionMenu"&gt;
            &lt;option value="horizontal" selected="selected"&gt;Horizontal&lt;/option&gt;
            &lt;option value="vertical"&gt;Vertical&lt;/option&gt;
        &lt;/select&gt;
    &lt;/dd&gt;
    &lt;dt&gt;Start Color:&lt;/dt&gt;
    &lt;dd&gt;&lt;input id="gradientStartColor"/&gt;&lt;/dd&gt;
    &lt;dt&gt;Start Offset:&lt;/dt&gt;
    &lt;dd&gt;&lt;input id="gradientStartOffset"/&gt;&lt;/dd&gt;
    &lt;dt&gt;Start Opacity:&lt;/dt&gt;
    &lt;dd&gt;&lt;input id="gradientStartOpacity"/&gt;&lt;/dd&gt;
    &lt;dt&gt;End Color:&lt;/dt&gt;
    &lt;dd&gt;&lt;input id="gradientEndColor"/&gt;&lt;/dd&gt;
    &lt;dt&gt;End Offset:&lt;/dt&gt;
    &lt;dd&gt;&lt;input id="gradientEndOffset"/&gt;&lt;/dd&gt;
    &lt;dt&gt;End Opacity:&lt;/dt&gt;
    &lt;dd&gt;&lt;input id="gradientEndOpacity"/&gt;&lt;/dd&gt;
&lt;/dl&gt;
                            </div>
                        <div class="tab-pane pane-content" id="gradientColorsJs">
// create FlexChart and Menus
var chart = new wijmo.chart.FlexChart('#chartGradientColors'),
    gredientLabel = document.getElementById('gradientColorsLabel'),
    gradientChartType = new wijmo.input.Menu('#gradientChartType'),
    type = new wijmo.input.Menu('#gradientTypeMenu'),
    dtDirection = document.getElementById('dtGradientDirection'),
    ddDirection = document.getElementById('ddGradientDirection'),
    direction = new wijmo.input.Menu('#gradientDirectionMenu'),
    startColor = new wijmo.input.InputColor('#gradientStartColor'),
    startOffset = new wijmo.input.InputNumber('#gradientStartOffset'),
    startOpacity = new wijmo.input.InputNumber('#gradientStartOpacity'),
    endColor = new wijmo.input.InputColor('#gradientEndColor'),
    endOffset = new wijmo.input.InputNumber('#gradientEndOffset'),
    endOpacity = new wijmo.input.InputNumber('#gradientEndOpacity');

// initialize FlexChart's properties
chart.initialize({
    itemsSource: appData,
    bindingX: 'country',
    series: [
        { binding: 'sales' }
    ]
});
applyGradientColor();

//chart type - initialize Menu's properties
updateMenuHeader(gradientChartType, 'Chart Type');
gradientChartType.selectedIndexChanged.addHandler(function () {
    if (gradientChartType.selectedValue) {
        chart.chartType = +gradientChartType.selectedValue;
        updateMenuHeader(gradientChartType, 'Chart Type');
    }
});

//startColor - initialize InputColor's properties
startColor.valueChanged.addHandler(function (sender) {
    applyGradientColor();
});
startColor.value = '#ff0000';

// startOffset - initialize InputNumber's properties
startOffset.min = 0;
startOffset.max = 1;
startOffset.step = 0.1;
startOffset.valueChanged.addHandler(function (sender) {
    if (sender.value < sender.min || sender.value > sender.max) {
        return;
    }
    applyGradientColor();
});
startOffset.value = 0;

// startOpacity - initialize InputNumber's properties
startOpacity.min = 0;
startOpacity.max = 1;
startOpacity.step = 0.1;
startOpacity.valueChanged.addHandler(function (sender) {
    if (sender.value < sender.min || sender.value > sender.max) {
        return;
    }
    applyGradientColor();
});
startOpacity.value = 1;

//endColor - initialize InputColor's properties
endColor.valueChanged.addHandler(function (sender) {
    applyGradientColor();
});
endColor.value = '#0000ff';

// endOffset - initialize InputNumber's properties
endOffset.min = 0;
endOffset.max = 1;
endOffset.step = 0.1;
endOffset.valueChanged.addHandler(function (sender) {
    if (sender.value < sender.min || sender.value > sender.max) {
        return;
    }
    applyGradientColor();
});
endOffset.value = 1;

// endOpacity - initialize InputNumber's properties
endOpacity.min = 0;
endOpacity.max = 1;
endOpacity.step = 0.1;
endOpacity.valueChanged.addHandler(function (sender) {
    if (sender.value < sender.min || sender.value > sender.max) {
        return;
    }
    applyGradientColor();
});
endOpacity.value = 1;

updateMenuHeader(type, 'Type');
type.selectedIndexChanged.addHandler(function () {
    if (type.selectedValue) {
        updateMenuHeader(type, 'Type');
        applyGradientColor();
    }
});

updateMenuHeader(direction, 'Direction');
direction.selectedIndexChanged.addHandler(function () {
    if (direction.selectedValue) {
        updateMenuHeader(direction, 'Direction');
        applyGradientColor();
    }
});

// helper function for Menu headers
function updateMenuHeader(menu, prefix) {
    menu.header = '<b>' + prefix + '</b>: ' + menu.text;
}

function applyGradientColor() {
        
    var color = '',
        t = type.selectedValue,
        d = direction.selectedValue;

    color = t;
    if (t === 'l') {
        dtDirection.style.display = 'block';
        ddDirection.style.display = 'block';
        if (d === 'horizontal') {
            color += '(0, 0, 1, 0)';
        } else {
            color += '(0, 0, 0, 1)';
        }
    } else {
        dtDirection.style.display = 'none';
        ddDirection.style.display = 'none';
        color += '(0.5, 0.5, 0.5)'
    }
    color += startColor.value;
    if (startOffset.value !== 0 || startOpacity.value !== 1) {
        color += ':' + startOffset.value;
    }
    if (startOpacity.value !== 1) {
        color += ':' + startOpacity.value;
    }
    color += '-' + endColor.value;
    if (endOffset.value !== 1 || endOpacity.value !== 1) {
        color += ':' + endOffset.value;
    }
    if (endOpacity.value !== 1) {
        color += ':' + endOpacity.value;
    }

    gradientColorsLabel.innerHTML = color;
    chart.series[0].style = {
        fill: color
    };
    chart.refresh(true);
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>结果：</h4>
                    <div id="chartGradientColors"></div>
                    <dl class="dl-horizontal">
                        <dt>生成填充字符串：</dt>
                        <dd>
                            <label id="gradientColorsLabel"></label>
                        </dd>
                        <dt></dt>
                        <dd>
                            <select id="gradientChartType">
                                <option value="0" selected="selected">Column</option>
                                <option value="1">Bar</option>
                                <option value="5">Area</option>
                                <option value="11">SplineArea</option>
                            </select>
                        </dd>
                        <dt></dt>
                        <dd>
                            <select id="gradientTypeMenu">
                                <option value="l" selected="selected">Linear</option>
                                <option value="r">Radial</option>
                            </select>
                        </dd>
                        <dt id="dtGradientDirection"></dt>
                        <dd id="ddGradientDirection">
                            <select id="gradientDirectionMenu">
                                <option value="horizontal" selected="selected">Horizontal</option>
                                <option value="vertical">Vertical</option>
                            </select>
                        </dd>
                        <dt>Start Color:</dt>
                        <dd><input id="gradientStartColor"/></dd>
                        <dt>Start Offset:</dt>
                        <dd><input id="gradientStartOffset"/></dd>
                        <dt>Start Opacity:</dt>
                        <dd><input id="gradientStartOpacity"/></dd>
                        <dt>End Color:</dt>
                        <dd><input id="gradientEndColor"/></dd>
                        <dt>End Offset:</dt>
                        <dd><input id="gradientEndOffset"/></dd>
                        <dt>End Opacity:</dt>
                        <dd><input id="gradientEndOpacity"/></dd>
                    </dl>
                </div>
            </div>
        </div>

        <!-- dynamic charts -->
        <div>
            <h2>动态图表</h2>
            <p>
                FlexChart内部使用了<b>ICollectionView</b>，因此你对数据源做的任何更改都会自动反映在图表中。
            </p>
            <p>
                在这个示例中，我们使用一个计时器来向数据源中增加项目，丢弃旧项目以保持总数为200。
                结果就是一个动态的图表，当新数据到来时图表向右滚动。
            </p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#dynamicHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#dynamicJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="dynamicHtml">
&lt;div id="dynamicChart"&gt;&lt;/div&gt;
&lt;dl class="dl-horizontal"&gt;
  &lt;dt&gt;Update Speed&lt;/dt&gt;
  &lt;dd&gt;
    &lt;div class="btn-group"&gt;
      &lt;button id="btnSlow" type="button" class="btn btn-default"&gt;Slow&lt;/button&gt;
      &lt;button id="btnMedium" type="button" class="btn btn-default"&gt;Medium&lt;/button&gt;
      &lt;button id="btnFast" type="button" class="btn btn-default"&gt;Fast&lt;/button&gt;
      &lt;button id="btnStop" type="button" class="btn btn-default"&gt;Stop&lt;/button&gt;
    &lt;/div&gt;
  &lt;/dd&gt;
&lt;/dl&gt;
                            </div>
                            <div class="tab-pane pane-content" id="dynamicJs">
// dynamic data
var toAddData, interval,
    trafficData = new wijmo.collections.ObservableArray(),
    setInterval = function (interval) {
      if (toAddData) {
        clearTimeout(toAddData);
        toAddData = null;
      }

      if (interval) {
        toAddData = setTimeout(function () {
          addTrafficItem(trafficData, interval);
        });
      }
    },
    // define the interval hash for the speed buttons
    intervalHash = {
      Slow: 200,
      Medium: 100,
      Fast: 50,
      Stop: 0
    },
    // create FlexChart
    dynamicChart = new wijmo.chart.FlexChart('#dynamicChart');

// initialize FlexChart's properties
dynamicChart.initialize({
    chartType: wijmo.chart.ChartType.Area,
    stacking: wijmo.chart.Stacking.Stacked,
    itemsSource: trafficData,
    bindingX: 'time',
    axisX: { format: 'mm:ss' },
    series: [
      { name: 'Trucks', binding: 'trucks' },
      { name: 'Ships', binding: 'ships' },
      { name: 'Planes', binding: 'planes' }
    ]
});

setInterval(500);

// Bind the click event to the speed buttons
for (var prop in intervalHash) {
  document.getElementById('btn' + prop).addEventListener('click', buttonClick(intervalHash[prop]));
}

function buttonClick(value) {
  return function () {
    setInterval(value);
  };
}

function addTrafficItem(trafficData, interval) {
  var len = trafficData.length,
      last = len ? trafficData[len - 1] : null,
      trucks = last ? last.trucks : 0,
      ships = last ? last.ships : 0,
      planes = last ? last.planes : 0;
      trucks = Math.max(0, trucks + Math.round(Math.random() * 50 - 25));
      ships = Math.max(0, ships + Math.round(Math.random() * 10 - 5));
      planes = Math.max(0, planes + Math.round(Math.random() * 10 - 5));

  // add random data, limit array length
  trafficData.push({ time: new Date(), trucks: trucks, ships: ships, planes: planes });

  if (trafficData.length > 200) {
    trafficData.splice(0, 1);
  }

  // keep adding
  if (interval) {
    toAddData = setTimeout(function () {
      addTrafficItem(trafficData, interval);
    }, interval);
  }
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>结果:</h4>
                    <div id="dynamicChart"></div>
                    <dl class="dl-horizontal">
                        <dt>更新速度</dt>
                        <dd>
                            <div class="btn-group">
                              <button id="btnSlow" type="button" class="btn btn-default">Slow</button>
                              <button id="btnMedium" type="button" class="btn btn-default">Medium</button>
                              <button id="btnFast" type="button" class="btn btn-default">Fast</button>
                              <button id="btnStop" type="button" class="btn btn-default">Stop</button>
                            </div>
                        </dd>
                    </dl>
                </div>
            </div>
        </div>
        
    </div>

    <script src="scripts/app.js" type="text/javascript"></script>
    <script src="scripts/gettingStartedChart.js" type="text/javascript"></script>
    <script src="scripts/chartTypes.js" type="text/javascript"></script>
    <script src="scripts/mixedTypesChart.js" type="text/javascript"></script>
    <script src="scripts/chartLegendAndTitles.js" type="text/javascript"></script>
    <script src="scripts/chartTooltip.js" type="text/javascript"></script>
    <script src="scripts/chartSeriesStyle.js" type="text/javascript"></script>
    <script src="scripts/chartCustomizeAxes.js" type="text/javascript"></script>
    <script src="scripts/chartTheme.js" type="text/javascript"></script>
    <script src="scripts/chartSelectionMode.js" type="text/javascript"></script>
    <script src="scripts/chartLegendToggle.js" type="text/javascript"></script>
    <script src="scripts/dynamicChart.js" type="text/javascript"></script>
    <script src="scripts/funnelChart.js" type="text/javascript"></script>
    <script src="scripts/gradientColors.js" type="text/javascript"></script>

    <!-- Google analytics -->
    
    <script src="scripts/wijmo.sample.toolbar.js" type="text/javascript"></script>
</body>
</html>
